Le principe est de voir combien notre héros va pouvoir tuer 
de monstres faciles et de monstres difficiles avant de mourir,
 en ayant perdu tous ses points de vie (mon héros démarre avec 150 points de vie). 
 Chaque monstre facile tué rapporte 1 point, 
 chaque monstre difficile tué en rapporte 2.
Un monstre aléatoire arrive, le héros attaque le monstre ;
 puis si le monstre a survécu il attaque à son tour le héros et ceci
 jusqu'à ce que mort s'en suive.

Une attaque du héros sur un monstre consiste en un jet de dé des deux protagonistes. 
Si le dé du héros est supérieur ou égal au dé du monstre, alors celui-ci est vaincu. 
Sinon, rien ne se passe et c'est au tour du monstre d'attaquer.
L'attaque du monstre facile sur le héros est similaire, 
mais à la différence que le jet du monstre doit être strictement supérieur 
au jet du héros. Eh oui, il faut bien avantager un peu notre héros :).

A noter que lorsque le héros subit des dégâts, son bouclier se déclenche 
avec un nouveau jet de dé. Si ce dernier est inférieur ou égal à 2 
(donc 2 chances sur 6), alors le héros ne perçoit pas de dégâts. 
Le cas contraire, ses points de vie sont diminués d'une valeur forfaitaire, 
disons 10 points de vie.

L'attaque du monstre difficile est la même que celle du monstre facile, 
sauf qu'il enchaine avec un sort magique. Un jet de dé est réalisé et si ce jet
 est différent de 6 alors le héros perçoit des dommages équivalent 
 à la valeur du dé multiplié par une valeur forfaitaire, disons 5.
// -----------------------------------------------------------------
La classe Joueur  :
	possède une propriété en lecture seule qui contient les points de vies ; 
	ceux-ci sont initialisés dans le constructeur.

	possède une propriété en lecture seule permettant de savoir si le joueur est vivant, 
	et encapsule le nombre de points de vie.

	possède une méthode Attaque, prenant en paramètre un monstre

	possède une méthode SubitDegats qui prend en paramètre un entier
	 avec la valeur des dégâts subits

La classe MonstreFacile  :
    possède également une méthode Attaque   
    possède une propriété en lecture seule qui encapsule 
	le fait de savoir si le monstre est vivant

La classe MonstreDifficile  :
    modifie le comportement de la méthode Attaque 

La classe De  :
    possède une méthode LanceLeDe qui renvoie un entier

// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Jeu
	GenererMonstre()
		si (De.jet() % 2) alors
			new MonstreDifficile();
		sinon
			new MonstreFacile();
		fin si
		fin generer_monstre
	LancerJeu()
		perso Hero = new Perso(150);
		tant que hero.est vivant()
		boucle
			perso Monstre = GenererMonstre();
			CalculerDegats(Hero, Monstre)
			si (Monstre.EstVivant()) alors
				CalculerDegats(Monstre, Hero)
			sinon
				si Monstre.Niveau = Niveau.Difficile alors
					cptMonstreDifficle ++;
				sinon
					cptMonstreFacile ++;
				fin si 
			fin si	
		fin boucle
	fin LancerJeu
fin Jeu

CalculerDegats(Perso Attaquant, Perso Defenseur)
	si (Attaquant = hero) alors
		si (Attaquant.attaque() >= Defenseur.Attaque()) alors
			Defenseur.Mourrir()
		fin si
	sinon 
		si (Attaquant.attaque() > Defenseur.Attaque()) alors
			Defenseur.SubirDegat()
		fin si
		si (Attaquant =  MonstreDiffcile) alors
			si (Attaquant.AttaqueSupplementaire()) alors
				Defenseur.SubirDegat()
			fin si
		fin si
	fin si

	
hero.attaque(perso m)
si (this.attaque>= m.attaque()) alors 
	m.mourrir();

monsf.attaque( perso hero)
	si (this.attaque() > hero.attaque() alors
		hero.subir_degats();
	fin si

monsd.attaque( perso hero)
	base.attaque()
	degats=this.lancersort()
	si (degats>0 ) alors
		hero.subir_degats(degats);
	fin si
	